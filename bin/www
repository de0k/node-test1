#!/usr/bin/env node
// 해당경로에서 노드를 실행. 이 파일을 실행할 때 Node.js로 실행하라는 지시

/*
  ★ 요약
  Express 애플리케이션을 HTTP 서버로 감싸서 실행하고, 
  지정된 포트에서 이를 리스닝하도록 설정하는 데 있습니다. 
  www 파일은 서버의 포트를 설정하고 
  오류 및 성공적인 서버 실행을 처리하는 역할을 수행하는 실행 스크립트 
*/

/**
 * 모듈 및 의존성 로드
 */

var app = require('../app'); // app.js 파일을 불러오기

// 디버그 메시지를 로깅하기 위해 사용하는 모듈. myapp:server라는 네임스페이스로
var debug = require('debug')('myapp:server'); 
var http = require('http'); // Node.js의 내장 모듈. HTTP 서버를 생성하고 관리

/**
 * 포트 설정
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * HTTP 서버 생성 및 실행
 * app.js에서 정의한 Express 애플리케이션을 HTTP 서버로 감싸서 만듭니다.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port); // 서버가 지정된 포트에서 리스닝하도록 설정
server.on('error', onError); // 오류 발생 시
server.on('listening', onListening); // 서버가 성공적으로 실행된 후

/**
 * 포트 번호 처리 함수
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 오류 핸들러
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 리스닝 이벤트 핸들러
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

